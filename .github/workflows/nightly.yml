name: Nightly PKG

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  push:
    branches:
    - macos_nightly_build_jt

jobs:
  Win64:
    if: github.repository == 'darktable-org/darktable'
    name: Nightly darktable.${{ github.sha }}.win64
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        btype: [Release]
        compiler: 
          - { compiler: GNU,  CC: gcc,   CXX: g++ }
        eco: [-DBINARY_PACKAGE_BUILD=ON]
        target: [skiptest]
    defaults:
      run:
        shell: msys2 {0}
    env:
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      ECO: ${{ matrix.eco }}
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      GENERATOR: 'MSYS Makefiles'
      TARGET: ${{ matrix.target }}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: >-
            base-devel
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-libxml2
            mingw-w64-x86_64-pugixml
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-exiv2
            mingw-w64-x86_64-lcms2
            mingw-w64-x86_64-lensfun
            mingw-w64-x86_64-dbus-glib
            mingw-w64-x86_64-openexr
            mingw-w64-x86_64-sqlite3
            mingw-w64-x86_64-libxslt
            mingw-w64-x86_64-libsoup
            mingw-w64-x86_64-libavif
            mingw-w64-x86_64-libheif
            mingw-w64-x86_64-libwebp
            mingw-w64-x86_64-libsecret
            mingw-w64-x86_64-lua
            mingw-w64-x86_64-graphicsmagick
            mingw-w64-x86_64-openjpeg2
            mingw-w64-x86_64-gtk3
            mingw-w64-x86_64-libexif
            mingw-w64-x86_64-osm-gps-map
            mingw-w64-x86_64-libgphoto2
            mingw-w64-x86_64-drmingw
            mingw-w64-x86_64-gettext
            mingw-w64-x86_64-python3
            mingw-w64-x86_64-iso-codes
            mingw-w64-x86_64-python3-jsonschema
            mingw-w64-x86_64-python3-six
            mingw-w64-x86_64-python3-setuptools
            mingw-w64-x86_64-gmic
            mingw-w64-x86_64-nsis
          update: true
      - uses: actions/checkout@v2
        with:
          submodules: true
          path: src
      - name: Build and Install
        run: |
          cmake -E make_directory "${BUILD_DIR}"
          cmake -E make_directory "${INSTALL_PREFIX}"
          $(cygpath ${SRC_DIR})/.ci/ci-script.sh
      - name: Check if it runs
        run: |
          $(cygpath ${INSTALL_PREFIX})/bin/darktable.exe --version || true
          $(cygpath ${INSTALL_PREFIX})/bin/darktable-cli.exe \
                 --width 2048 --height 2048 \
                 --hq true --apply-custom-presets false \
                 $(cygpath ${SRC_DIR})/src/tests/integration/images/mire1.cr2 \
                 $(cygpath ${SRC_DIR})/src/tests/integration/0000-nop/nop.xmp \
                 output.png \
                 --core --disable-opencl --conf host_memory_limit=8192 \
                 --conf worker_threads=4 -t 4 \
                 --conf plugins/lighttable/export/force_lcms2=FALSE \
                 --conf plugins/lighttable/export/iccintent=0
      - name: Package
        if: ${{ success() && matrix.btype == 'Release' && matrix.target == 'skiptest' }}
        run: |
          lensfun-update-data
          cd "${BUILD_DIR}"
          cmake --build "${BUILD_DIR}" --target package
      - name: Package upload
        if: ${{ success() && matrix.btype == 'Release' && matrix.target == 'skiptest' }}
        uses: 'actions/upload-artifact@v2'
        with:
          name: darktable.${{ github.sha }}.win64.zip
          path: ${{ env.BUILD_DIR }}/darktable-*.exe
          retention-days: 2
  
  macOS:
    name: Nightly darktable.${{ github.sha }}-${{ matrix.build.deployment }}-${{ matrix.build.xcode }}.macOS
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - { os: macos-10.15, xcode: 11.3.1, deployment: 10.7 }
          #- { os: macos-10.15, xcode: 11.7,   deployment: 10.14 } build fails
          - { os: macos-10.15, xcode: 12.4,   deployment: 10.15 }
          - { os: macos-11,    xcode: 12.5.1, deployment: 11.3 }
        compiler:
          - { compiler: XCode,   CC: cc, CXX: c++ }
        btype: [ RelWithDebInfo ]
        eco: [-DBINARY_PACKAGE_BUILD=ON -DBUILD_CURVE_TOOLS=ON -DBUILD_NOISE_TOOLS=ON]
        target:
          - skiptest
    env:
      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.build.xcode }}.app/Contents/Developer
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.build.deployment }}
      CXXFLAGS: -stdlib=libc++
      OBJCXXFLAGS: -stdlib=libc++
      ECO: ${{ matrix.eco }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      MACOS_PACKAGING_DIR: ${{ github.workspace }}/src/packaging/macosx
      LENSFUN_INSTALL_PREFIX: ${{ github.workspace }}/lensfun
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      GENERATOR: Unix Makefiles
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          path: src
      - name: Install Base Dependencies
        run: |
          brew update > /dev/null || true
          brew unlink python@3.8
          brew unlink gcc@9
          sudo rm '/usr/local/bin/2to3'
          brew link --overwrite python@3.9 # workaround introduced 30.12.2020, replace asap.
          # brew upgrade --ignore-pinned # workaround introduced 18.07.2021, replace asap
          brew tap Homebrew/bundle
          cd src/.ci 
          brew bundle --verbose
          brew uninstall lensfun
      - name: Compile and install lensfun
        run: |
          wget https://github.com/lensfun/lensfun/archive/refs/tags/v0.3.2.tar.gz -O lensfun-v0.3.2.tar.gz
          tar xzf lensfun-v0.3.2.tar.gz
          cd lensfun-0.3.2
          mkdir cmake_build && cd cmake_build
          cmake ../ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$LENSFUN_INSTALL_PREFIX
          export LIBRARY_PATH="$LIBRARY_PATH:`brew --prefix`/lib"
          make
          sudo make install
      - name: Update lensfun data
        env:
          PYTHONPATH: ${{ env.LENSFUN_INSTALL_PREFIX }}/lib/python3.9/site-packages/
        run: |
          export PATH=$PATH:$LENSFUN_INSTALL_PREFIX/bin
          lensfun-update-data
      - name: Build and Install
        env:
          LENSFUN_INCLUDE_DIR: ${{ env.LENSFUN_INSTALL_PREFIX }}/include/lensfun
          LENSFUN_LIB_DIR: ${{ env.LENSFUN_INSTALL_PREFIX }}/lib
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          ./src/.ci/ci-script.sh;
      - name: Correct links to liblensfun (install_name_tool)
        run: |
          ls -al ${INSTALL_PREFIX}/bin/
          find ${INSTALL_PREFIX}/bin/ -type f | xargs -n 1 sudo install_name_tool -change liblensfun.1.dylib $LENSFUN_INSTALL_PREFIX/lib/liblensfun.1.dylib
          find ${INSTALL_PREFIX} -type f -name "*.dylib" | xargs -n 1 sudo install_name_tool -change liblensfun.1.dylib $LENSFUN_INSTALL_PREFIX/lib/liblensfun.1.dylib
          find ${INSTALL_PREFIX} -type f -name "*.so" | xargs -n 1 sudo install_name_tool -change liblensfun.1.dylib $LENSFUN_INSTALL_PREFIX/lib/liblensfun.1.dylib
      - name: Check if compiled binary runs
        run: |
          otool -L ${INSTALL_PREFIX}/bin/darktable
          ${INSTALL_PREFIX}/bin/darktable --version || true
          ${INSTALL_PREFIX}/bin/darktable-cli \
                 --width 2048 --height 2048 \
                 --hq true --apply-custom-presets false \
                 "${SRC_DIR}/src/tests/integration/images/mire1.cr2" \
                 "${SRC_DIR}/src/tests/integration/0000-nop/nop.xmp" \
                 output.png \
                 --core --disable-opencl --conf host_memory_limit=8192 \
                 --conf worker_threads=4 -t 4 \
                 --conf plugins/lighttable/export/force_lcms2=FALSE \
                 --conf plugins/lighttable/export/iccintent=0
      - name: Install and prepare mac bundler
        run: |
          cd ${SRC_DIR}
          curl -LO https://download.gnome.org/sources/gtk-mac-bundler/0.7/gtk-mac-bundler-0.7.4.tar.xz
          tar -xf gtk-mac-bundler-0.7.4.tar.xz
          cd gtk-mac-bundler-0.7.4
          patch -p1 < ${MACOS_PACKAGING_DIR}/gtk-mac-bundler-0.7.4.patch
          make install
      - name: Fetch git tags for next step
        run: |
          cd ${SRC_DIR}
          git fetch --tags
      - name: Create DMG image
        env:
          PYTHONPATH: ${{ env.LENSFUN_INSTALL_PREFIX }}/lib/python3.9/site-packages/
        run: |
          export PATH=$PATH:$LENSFUN_INSTALL_PREFIX/bin
          cd ${MACOS_PACKAGING_DIR}
          ./make-app-bundle ./darktable-nightly.bundle
      - name: Check if app in bundle runs
        run: |
          ls ${MACOS_PACKAGING_DIR}/*.dmg | head -1 | xargs hdiutil attach
          /Volumes/darktable/darktable.app/Contents/MacOS/darktable --version || true
      - name: Publish artifacts
        uses: 'actions/upload-artifact@v2'
        with:
          name: darktable.${{ github.sha }}-${{ matrix.build.deployment }}-${{ matrix.build.xcode }}.macos.dmg
          path: ${{ env.MACOS_PACKAGING_DIR }}/*.dmg
          retention-days: 7